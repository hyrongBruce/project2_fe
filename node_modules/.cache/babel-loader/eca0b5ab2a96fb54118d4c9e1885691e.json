{"ast":null,"code":"import { updateObject } from '../utility';\nimport * as actions from '../actions/Index';\nconst initialState = {\n  token: null,\n  userId: null,\n  authRedirectPath: '/',\n  logStatus: 'init',\n  logo: 'no action',\n  isAuthenticated: false,\n  error: null\n};\n\nconst authSuccess = (state, action) => {\n  console.log('verifying success');\n  localStorage.setItem('token', action.myToken);\n  localStorage.setItem('userId', action.myId);\n  return updateObject(state, {\n    token: action.myToken,\n    userId: action.myId,\n    isAuthenticated: true,\n    error: null\n  });\n};\n\nconst authFail = (state, action) => {\n  let failstate = 'fail';\n  if (action.authmode === 'signup') failstate = 'fail_signup';\n  return updateObject(authLogOut(state, action), {\n    logStatus: failstate,\n    error: action.error\n  });\n};\n\nconst authLogOut = (state, action) => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n  return updateObject(state, {\n    logStatus: 'init',\n    isAuthenticated: false,\n    token: null,\n    userId: null\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    // case 'test_auth_reducer': \n    //     console.log('auth reducer triggered');\n    //     return updateObject(state, {logo: 'auth triggered'});\n    case 'auth_start':\n      return updateObject(state, {\n        logStatus: 'process'\n      });\n\n    case 'auth_success':\n      return authSuccess(state, action);\n\n    case 'auth_fail':\n      return authFail(state, action);\n\n    case 'auth_logout':\n      return authLogOut(state, action);\n\n    case 'test_get_all_users':\n      actions.getAllUsers();\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/ItlizeDocs/project2/project2_fe/src/store/reducers/auth.js"],"names":["updateObject","actions","initialState","token","userId","authRedirectPath","logStatus","logo","isAuthenticated","error","authSuccess","state","action","console","log","localStorage","setItem","myToken","myId","authFail","failstate","authmode","authLogOut","removeItem","reducer","type","getAllUsers"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,YAA3B;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,IADU;AAEjBC,EAAAA,MAAM,EAAE,IAFS;AAGjBC,EAAAA,gBAAgB,EAAE,GAHD;AAIjBC,EAAAA,SAAS,EAAE,MAJM;AAKjBC,EAAAA,IAAI,EAAE,WALW;AAMjBC,EAAAA,eAAe,EAAE,KANA;AAOjBC,EAAAA,KAAK,EAAE;AAPU,CAArB;;AAWA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AAEAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA6BJ,MAAM,CAACK,OAApC;AACAF,EAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA8BJ,MAAM,CAACM,IAArC;AACA,SAAOlB,YAAY,CAACW,KAAD,EAAO;AACtBR,IAAAA,KAAK,EAAES,MAAM,CAACK,OADQ;AAEtBb,IAAAA,MAAM,EAAEQ,MAAM,CAACM,IAFO;AAGtBV,IAAAA,eAAe,EAAE,IAHK;AAItBC,IAAAA,KAAK,EAAE;AAJe,GAAP,CAAnB;AAMH,CAXD;;AAaA,MAAMU,QAAQ,GAAG,CAACR,KAAD,EAAQC,MAAR,KAAkB;AAC/B,MAAIQ,SAAS,GAAG,MAAhB;AACA,MAAGR,MAAM,CAACS,QAAP,KAAkB,QAArB,EACID,SAAS,GAAG,aAAZ;AACJ,SAAOpB,YAAY,CAACsB,UAAU,CAACX,KAAD,EAAOC,MAAP,CAAX,EAA0B;AACzCN,IAAAA,SAAS,EAAEc,SAD8B;AAEzCX,IAAAA,KAAK,EAAEG,MAAM,CAACH;AAF2B,GAA1B,CAAnB;AAIH,CARD;;AAUA,MAAMa,UAAU,GAAG,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAElCG,EAAAA,YAAY,CAACQ,UAAb,CAAwB,OAAxB;AACAR,EAAAA,YAAY,CAACQ,UAAb,CAAwB,QAAxB;AAEA,SAAOvB,YAAY,CAACW,KAAD,EAAQ;AACvBL,IAAAA,SAAS,EAAE,MADY;AAEvBE,IAAAA,eAAe,EAAE,KAFM;AAGvBL,IAAAA,KAAK,EAAE,IAHgB;AAIvBC,IAAAA,MAAM,EAAE;AAJe,GAAR,CAAnB;AAMH,CAXD;;AAcA,MAAMoB,OAAO,GAAG,CAACb,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AAC9C,UAAOA,MAAM,CAACa,IAAd;AACI;AACA;AACA;AACA,SAAK,YAAL;AACI,aAAOzB,YAAY,CAACW,KAAD,EAAQ;AAACL,QAAAA,SAAS,EAAE;AAAZ,OAAR,CAAnB;;AACJ,SAAK,cAAL;AACI,aAAOI,WAAW,CAACC,KAAD,EAAOC,MAAP,CAAlB;;AACJ,SAAK,WAAL;AACI,aAAOO,QAAQ,CAACR,KAAD,EAAOC,MAAP,CAAf;;AACJ,SAAK,aAAL;AACI,aAAOU,UAAU,CAACX,KAAD,EAAOC,MAAP,CAAjB;;AAEJ,SAAK,oBAAL;AACIX,MAAAA,OAAO,CAACyB,WAAR;AACA,aAAOf,KAAP;;AACJ;AACI,aAAOA,KAAP;AAjBR;AAmBH,CApBD;;AAsBA,eAAea,OAAf","sourcesContent":["import {updateObject} from '../utility';\r\nimport * as actions from '../actions/Index';\r\n\r\nconst initialState = {\r\n    token: null,\r\n    userId: null,\r\n    authRedirectPath: '/',\r\n    logStatus: 'init',\r\n    logo: 'no action',\r\n    isAuthenticated: false,\r\n    error: null\r\n};\r\n\r\n\r\nconst authSuccess = (state,action) => {\r\n    console.log('verifying success');\r\n    \r\n    localStorage.setItem('token',action.myToken);\r\n    localStorage.setItem('userId',action.myId);\r\n    return updateObject(state,{\r\n        token: action.myToken,\r\n        userId: action.myId,\r\n        isAuthenticated: true,\r\n        error: null\r\n    });\r\n}\r\n\r\nconst authFail = (state, action) =>{\r\n    let failstate = 'fail';\r\n    if(action.authmode==='signup')\r\n        failstate = 'fail_signup';\r\n    return updateObject(authLogOut(state,action),{\r\n        logStatus: failstate,\r\n        error: action.error\r\n    });\r\n}\r\n\r\nconst authLogOut = (state, action) => {\r\n    \r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userId');\r\n    \r\n    return updateObject(state, {\r\n        logStatus: 'init',\r\n        isAuthenticated: false,\r\n        token: null,\r\n        userId: null\r\n    });\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        // case 'test_auth_reducer': \r\n        //     console.log('auth reducer triggered');\r\n        //     return updateObject(state, {logo: 'auth triggered'});\r\n        case 'auth_start':\r\n            return updateObject(state, {logStatus: 'process'});\r\n        case 'auth_success':\r\n            return authSuccess(state,action);\r\n        case 'auth_fail':\r\n            return authFail(state,action);\r\n        case 'auth_logout':\r\n            return authLogOut(state,action);\r\n\r\n        case 'test_get_all_users': \r\n            actions.getAllUsers();\r\n            return state;\r\n        default:  \r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}