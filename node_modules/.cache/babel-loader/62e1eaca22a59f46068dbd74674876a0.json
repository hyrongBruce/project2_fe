{"ast":null,"code":"var _jsxFileName = \"D:\\\\ItlizeDocs\\\\project2\\\\project2_fe\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport * as actions from '../../store/actions/Index';\nimport { updateObject } from '../../store/utility';\nimport './Auth.css';\nimport { InputText } from 'primereact/inputtext';\nimport { Button } from 'primereact/button';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        username: {\n          type: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'User Name',\n            icon: 'pi pi-user',\n            class: 'inputArea'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          type: 'input',\n          config: {\n            type: 'password',\n            placeholder: 'Password',\n            icon: 'pi pi-lock',\n            class: 'inputArea'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          type: 'input',\n          config: {\n            type: 'email',\n            placeholder: 'Email: xxx@xxx.com',\n            icon: 'pi pi-envelope',\n            class: 'inputArea'\n          },\n          value: '',\n          validation: {\n            required: false\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      logmodelist: ['login', 'signup'],\n      authmodeinputs: {\n        login: ['username', 'password'],\n        signup: ['username', 'password', 'email']\n      },\n      authmodehandler: {\n        login: this.loginHandler,\n        signup: this.signupHandler\n      },\n      authmode: 'login'\n    };\n\n    this.inputChangeHandler = (event, elementId) => {\n      let updatedstate = this.state;\n      updatedstate.controls[elementId].value = event.target.value;\n      this.setState(updatedstate);\n    };\n\n    this.loginHandler = event => {\n      event.preventDefault();\n      console.log('submit: ' + this.state.controls.username.value + ', ' + this.state.controls.password.value);\n      this.props.login(this.state.controls.username.value, this.state.controls.password.value, this.state.authmode);\n    };\n\n    this.authModeChangeHandler = event => {\n      event.preventDefault();\n      console.log('switch authmode');\n      this.props.logout();\n      this.setState(updateObject(this.state, {\n        authmode: this.state.authmode === 'login' ? 'signup' : 'login'\n      }));\n    };\n  }\n\n  render() {\n    // console.log(this.props.token);\n    const formElementsArray = [];\n\n    for (let key of this.state.authmodeinputs[this.state.authmode]) {\n      formElementsArray.push({\n        key: key,\n        property: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(element => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group inputDiv\",\n      key: element.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputText, {\n      key: element.key,\n      type: element.property.config.type,\n      value: element.property.value,\n      placeholder: element.property.config.placeholder,\n      onChange: event => this.inputChangeHandler(event, element.key),\n      required: element.property.validation.required,\n      className: element.property.config.class,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"i\", {\n      className: element.property.config.icon + \" Inputicon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    })));\n    let note = '';\n    console.log(this.props.logStatus);\n\n    switch (this.props.logStatus) {\n      case 'init':\n        if (this.state.authmode === 'login') note = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }\n        }, \"please input username and password\"));else note = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }\n        }, \"please fill the information below to create a new account\"));\n        break;\n\n      case 'process':\n        note = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"pi pi-spin pi-spinner\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 21\n          }\n        }, \"verifying...\"));\n        break;\n\n      case 'fail':\n        note = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: 'red'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 21\n          }\n        }, \"wrong username or password, please input again...\"));\n        break;\n\n      case 'fail_signup':\n        note = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: 'red'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }\n        }, \"user name already in use, please input again...\"));\n        break;\n\n      default:\n        break;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Auth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: 'lightslategray',\n        marginBottom: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }, note), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }, form), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ButtonArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      label: this.state.authmode,\n      onClick: this.loginHandler,\n      className: \"p-button-raised p-button-rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      label: 'to ' + (this.state.authmode === 'login' ? 'sign up' : 'log in'),\n      onClick: this.authModeChangeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  logStatus: state.auth.logStatus,\n  userId: state.auth.userId,\n  token: state.auth.token,\n  error: state.auth.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // login: (uname,pwd)=> dispatch({type:'auth_login_start', uname, pwd}),\n  login: (uname, pwd, authmode) => actions.authLogin(uname, pwd, authmode)(dispatch),\n  logout: () => dispatch({\n    type: 'auth_logout'\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["D:/ItlizeDocs/project2/project2_fe/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","actions","updateObject","InputText","Button","Auth","state","controls","username","type","config","placeholder","icon","class","value","validation","required","valid","touched","password","minLength","email","logmodelist","authmodeinputs","login","signup","authmodehandler","loginHandler","signupHandler","authmode","inputChangeHandler","event","elementId","updatedstate","target","setState","preventDefault","console","log","props","authModeChangeHandler","logout","render","formElementsArray","key","push","property","form","map","element","note","logStatus","color","marginBottom","mapStateToProps","auth","userId","token","error","mapDispatchToProps","dispatch","uname","pwd","authLogin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,OAAO,YAAP;AACA,SAAQC,SAAR,QAAwB,sBAAxB;AACA,SAAQC,MAAR,QAAqB,mBAArB;;AAEA,MAAMC,IAAN,SAAmBP,SAAnB,CAA4B;AAAA;AAAA;AAAA,SAExBQ,KAFwB,GAEhB;AACJC,MAAAA,QAAQ,EAAC;AACLC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,IAAI,EAAE,OADA;AAENC,UAAAA,MAAM,EAAE;AACJD,YAAAA,IAAI,EAAE,MADF;AAEJE,YAAAA,WAAW,EAAE,WAFT;AAGJC,YAAAA,IAAI,EAAE,YAHF;AAIJC,YAAAA,KAAK,EAAE;AAJH,WAFF;AAQNC,UAAAA,KAAK,EAAE,EARD;AASNC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WATN;AAYNC,UAAAA,KAAK,EAAE,KAZD;AAaNC,UAAAA,OAAO,EAAE;AAbH,SADL;AAgBLC,QAAAA,QAAQ,EAAE;AACNV,UAAAA,IAAI,EAAE,OADA;AAENC,UAAAA,MAAM,EAAE;AACJD,YAAAA,IAAI,EAAE,UADF;AAEJE,YAAAA,WAAW,EAAE,UAFT;AAGJC,YAAAA,IAAI,EAAE,YAHF;AAIJC,YAAAA,KAAK,EAAE;AAJH,WAFF;AAQNC,UAAAA,KAAK,EAAE,EARD;AASNC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERI,YAAAA,SAAS,EAAE;AAFH,WATN;AAaNH,UAAAA,KAAK,EAAE,KAbD;AAcNC,UAAAA,OAAO,EAAE;AAdH,SAhBL;AAgCLG,QAAAA,KAAK,EAAE;AACHZ,UAAAA,IAAI,EAAE,OADH;AAEHC,UAAAA,MAAM,EAAE;AACJD,YAAAA,IAAI,EAAE,OADF;AAEJE,YAAAA,WAAW,EAAE,oBAFT;AAGJC,YAAAA,IAAI,EAAE,gBAHF;AAIJC,YAAAA,KAAK,EAAE;AAJH,WAFL;AAQHC,UAAAA,KAAK,EAAE,EARJ;AASHC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WATT;AAYHC,UAAAA,KAAK,EAAE,KAZJ;AAaHC,UAAAA,OAAO,EAAE;AAbN;AAhCF,OADL;AAiDJI,MAAAA,WAAW,EAAE,CAAC,OAAD,EAAS,QAAT,CAjDT;AAkDJC,MAAAA,cAAc,EAAE;AACZC,QAAAA,KAAK,EAAE,CAAC,UAAD,EAAY,UAAZ,CADK;AAEZC,QAAAA,MAAM,EAAE,CAAC,UAAD,EAAY,UAAZ,EAAuB,OAAvB;AAFI,OAlDZ;AAsDJC,MAAAA,eAAe,EAAE;AACbF,QAAAA,KAAK,EAAE,KAAKG,YADC;AAEbF,QAAAA,MAAM,EAAE,KAAKG;AAFA,OAtDb;AA0DJC,MAAAA,QAAQ,EAAC;AA1DL,KAFgB;;AAAA,SAkJxBC,kBAlJwB,GAkJH,CAACC,KAAD,EAAQC,SAAR,KAAsB;AACvC,UAAIC,YAAY,GAAG,KAAK3B,KAAxB;AACA2B,MAAAA,YAAY,CAAC1B,QAAb,CAAsByB,SAAtB,EAAiClB,KAAjC,GAAuCiB,KAAK,CAACG,MAAN,CAAapB,KAApD;AAEA,WAAKqB,QAAL,CAAcF,YAAd;AACH,KAvJuB;;AAAA,SAyKxBN,YAzKwB,GAyKRI,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACK,cAAN;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAW,KAAKhC,KAAL,CAAWC,QAAX,CAAoBC,QAApB,CAA6BM,KAAxC,GAA+C,IAA/C,GAAoD,KAAKR,KAAL,CAAWC,QAAX,CAAoBY,QAApB,CAA6BL,KAA7F;AACA,WAAKyB,KAAL,CAAWf,KAAX,CAAiB,KAAKlB,KAAL,CAAWC,QAAX,CAAoBC,QAApB,CAA6BM,KAA9C,EAAoD,KAAKR,KAAL,CAAWC,QAAX,CAAoBY,QAApB,CAA6BL,KAAjF,EAAuF,KAAKR,KAAL,CAAWuB,QAAlG;AACH,KA7KuB;;AAAA,SA+KxBW,qBA/KwB,GA+KCT,KAAD,IAAW;AAC/BA,MAAAA,KAAK,CAACK,cAAN;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEA,WAAKC,KAAL,CAAWE,MAAX;AACA,WAAKN,QAAL,CAAcjC,YAAY,CAAC,KAAKI,KAAN,EACtB;AAACuB,QAAAA,QAAQ,EAAE,KAAKvB,KAAL,CAAWuB,QAAX,KAAsB,OAAtB,GAA+B,QAA/B,GAAyC;AAApD,OADsB,CAA1B;AAGH,KAvLuB;AAAA;;AA+DxBa,EAAAA,MAAM,GAAG;AACL;AAEA,UAAMC,iBAAiB,GAAC,EAAxB;;AACA,SAAI,IAAIC,GAAR,IAAe,KAAKtC,KAAL,CAAWiB,cAAX,CAA0B,KAAKjB,KAAL,CAAWuB,QAArC,CAAf,EAA8D;AAC1Dc,MAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBD,QAAAA,GAAG,EAACA,GADe;AAEnBE,QAAAA,QAAQ,EAAE,KAAKxC,KAAL,CAAWC,QAAX,CAAoBqC,GAApB;AAFS,OAAvB;AAIH;;AAED,QAAIG,IAAI,GAAGJ,iBAAiB,CAACK,GAAlB,CAAsBC,OAAO,iBACpC;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAsC,MAAA,GAAG,EAAEA,OAAO,CAACL,GAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,GAAG,EAAEK,OAAO,CAACL,GADjB;AAEI,MAAA,IAAI,EAAEK,OAAO,CAACH,QAAR,CAAiBpC,MAAjB,CAAwBD,IAFlC;AAGI,MAAA,KAAK,EAAEwC,OAAO,CAACH,QAAR,CAAiBhC,KAH5B;AAII,MAAA,WAAW,EAAEmC,OAAO,CAACH,QAAR,CAAiBpC,MAAjB,CAAwBC,WAJzC;AAKI,MAAA,QAAQ,EAAGoB,KAAD,IAAS,KAAKD,kBAAL,CAAwBC,KAAxB,EAA8BkB,OAAO,CAACL,GAAtC,CALvB;AAMI,MAAA,QAAQ,EAAEK,OAAO,CAACH,QAAR,CAAiB/B,UAAjB,CAA4BC,QAN1C;AAOI,MAAA,SAAS,EAAEiC,OAAO,CAACH,QAAR,CAAiBpC,MAAjB,CAAwBG,KAPvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAaI;AAAG,MAAA,SAAS,EAAEoC,OAAO,CAACH,QAAR,CAAiBpC,MAAjB,CAAwBE,IAAxB,GAA6B,YAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbJ,CADO,CAAX;AAkBA,QAAIsC,IAAI,GAAC,EAAT;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWY,SAAvB;;AACA,YAAQ,KAAKZ,KAAL,CAAWY,SAAnB;AACI,WAAK,MAAL;AACI,YAAG,KAAK7C,KAAL,CAAWuB,QAAX,KAAwB,OAA3B,EACIqB,IAAI,gBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADI,CAAR,CADJ,KAKIA,IAAI,gBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEADI,CAAR;AAGJ;;AACJ,WAAK,SAAL;AACIA,QAAAA,IAAI,gBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACJ;AAAG,UAAA,SAAS,EAAC,uBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADI,eAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFI,CAAR;AAIA;;AACJ,WAAK,MAAL;AACIA,QAAAA,IAAI,gBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACJ;AAAM,UAAA,KAAK,EAAE;AAACE,YAAAA,KAAK,EAAE;AAAR,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DADI,CAAR;AAGA;;AACJ,WAAK,aAAL;AACIF,QAAAA,IAAI,gBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAM,UAAA,KAAK,EAAE;AAACE,YAAAA,KAAK,EAAE;AAAR,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADJ,CADJ;AAKA;;AACJ;AACI;AA9BR;;AAiCA,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAE;AAACA,QAAAA,KAAK,EAAE,gBAAR;AAAyBC,QAAAA,YAAY,EAAE;AAAvC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKH,IADL,CADJ,eAKI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuBH,IAAvB,CALJ,eAMI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,KAAKzC,KAAL,CAAWuB,QAA1B;AACI,MAAA,OAAO,EAAE,KAAKF,YADlB;AAEI,MAAA,SAAS,EAAC,kCAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,eAKI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,SAAQ,KAAKrB,KAAL,CAAWuB,QAAX,KAAwB,OAAzB,GAAkC,SAAlC,GAA4C,QAAnD,CAAf;AACI,MAAA,OAAO,EAAE,KAAKW,qBADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CANJ,CADJ;AAiBH;;AAhJuB;;AA4L5B,MAAMc,eAAe,GAAIhD,KAAD,KAAY;AAChC6C,EAAAA,SAAS,EAAE7C,KAAK,CAACiD,IAAN,CAAWJ,SADU;AAEhCK,EAAAA,MAAM,EAAElD,KAAK,CAACiD,IAAN,CAAWC,MAFa;AAGhCC,EAAAA,KAAK,EAAEnD,KAAK,CAACiD,IAAN,CAAWE,KAHc;AAIhCC,EAAAA,KAAK,EAAEpD,KAAK,CAACiD,IAAN,CAAWG;AAJc,CAAZ,CAAxB;;AAOA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpC;AACApC,EAAAA,KAAK,EAAE,CAACqC,KAAD,EAAOC,GAAP,EAAWjC,QAAX,KAAuB5B,OAAO,CAAC8D,SAAR,CAAkBF,KAAlB,EAAwBC,GAAxB,EAA4BjC,QAA5B,EAAsC+B,QAAtC,CAFM;AAGpCnB,EAAAA,MAAM,EAAE,MAAMmB,QAAQ,CAAC;AAACnD,IAAAA,IAAI,EAAE;AAAP,GAAD;AAHc,CAAL,CAAnC;;AAMA,eAAeV,OAAO,CAACuD,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CtD,IAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport * as actions from '../../store/actions/Index'\r\nimport { updateObject } from '../../store/utility';\r\nimport './Auth.css';\r\nimport {InputText} from 'primereact/inputtext';\r\nimport {Button} from 'primereact/button';\r\n\r\nclass Auth extends Component{\r\n\r\n    state = {\r\n        controls:{\r\n            username: {\r\n                type: 'input',\r\n                config: {\r\n                    type: 'text',\r\n                    placeholder: 'User Name',\r\n                    icon: 'pi pi-user',\r\n                    class: 'inputArea'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                type: 'input',\r\n                config: {\r\n                    type: 'password',\r\n                    placeholder: 'Password',\r\n                    icon: 'pi pi-lock',\r\n                    class: 'inputArea'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                type: 'input',\r\n                config: {\r\n                    type: 'email',\r\n                    placeholder: 'Email: xxx@xxx.com',\r\n                    icon: 'pi pi-envelope',\r\n                    class: 'inputArea'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: false\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        logmodelist: ['login','signup'],\r\n        authmodeinputs: {\r\n            login: ['username','password'],\r\n            signup: ['username','password','email']\r\n        },\r\n        authmodehandler: {\r\n            login: this.loginHandler,\r\n            signup: this.signupHandler\r\n        },\r\n        authmode:'login'\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props.token);\r\n\r\n        const formElementsArray=[];\r\n        for(let key of this.state.authmodeinputs[this.state.authmode]){\r\n            formElementsArray.push({\r\n                key:key,\r\n                property: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(element => (\r\n            <div className=\"input-group inputDiv\" key={element.key}>\r\n                <InputText\r\n                    key={element.key}\r\n                    type={element.property.config.type}\r\n                    value={element.property.value}\r\n                    placeholder={element.property.config.placeholder}\r\n                    onChange={(event)=>this.inputChangeHandler(event,element.key)}\r\n                    required={element.property.validation.required}\r\n                    className={element.property.config.class}\r\n                />\r\n                {/* <span className=\"input-group-addon\">\r\n                    <i className={element.property.config.icon+\" Inputicon\"}></i>\r\n                </span>  */}\r\n                <i className={element.property.config.icon+\" Inputicon\"}></i>\r\n            </div>\r\n        ));\r\n\r\n        let note='';\r\n        console.log(this.props.logStatus);\r\n        switch (this.props.logStatus) {\r\n            case 'init':\r\n                if(this.state.authmode === 'login')\r\n                    note = (<div>\r\n                        <span>please input username and password</span>\r\n                    </div>);\r\n                else\r\n                    note = (<div>\r\n                        <span>please fill the information below to create a new account</span>\r\n                    </div>);\r\n                break;\r\n            case 'process':\r\n                note = (<div>\r\n                    <i className=\"pi pi-spin pi-spinner\"></i>\r\n                    <span>verifying...</span> \r\n                </div>);\r\n                break;\r\n            case 'fail':\r\n                note = (<div>\r\n                    <span style={{color: 'red'}}>wrong username or password, please input again...</span>\r\n                </div>);\r\n                break;\r\n            case 'fail_signup':\r\n                note = (\r\n                    <div>\r\n                        <span style={{color: 'red'}}>user name already in use, please input again...</span>\r\n                    </div>\r\n                );\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        \r\n        return (\r\n            <div className=\"Auth\">\r\n                <div style={{color: 'lightslategray',marginBottom: '10px'}}>\r\n                    {note}\r\n                    {/* {this.state.notemode} */}\r\n                </div>\r\n                <div className=\"form\">{form}</div>\r\n                <div className=\"ButtonArea\">    \r\n                    <Button label={this.state.authmode} \r\n                        onClick={this.loginHandler} \r\n                        className=\"p-button-raised p-button-rounded\"/>\r\n                    <p></p>\r\n                    <Button label={'to '+((this.state.authmode === 'login')?'sign up':'log in')} \r\n                        onClick={this.authModeChangeHandler} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputChangeHandler = (event, elementId) => {        \r\n        let updatedstate = this.state;\r\n        updatedstate.controls[elementId].value=event.target.value;\r\n        \r\n        this.setState(updatedstate);\r\n    }\r\n    // inputChangedHandler = ( event, controlName ) => {\r\n    //     // console.log(...this.state.controls);\r\n    //       const updatedControls = {\r\n    //           ...this.state.controls,\r\n    //           [controlName]: {\r\n    //               ...this.state.controls[controlName],\r\n    //               value: event.target.value,\r\n    //               valid: this.checkValidity( event.target.value, this.state.controls[controlName].validation ),\r\n    //               touched: true\r\n    //           }\r\n    //       };\r\n    //       console.log(updatedControls);\r\n    //       console.log(this.state);\r\n    //       this.setState( { controls: updatedControls } );\r\n  \r\n    //   }\r\n    \r\n    loginHandler = (event) => {\r\n        event.preventDefault();\r\n        console.log('submit: '+this.state.controls.username.value+ ', '+this.state.controls.password.value);\r\n        this.props.login(this.state.controls.username.value,this.state.controls.password.value,this.state.authmode);\r\n    }\r\n    \r\n    authModeChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        console.log('switch authmode');\r\n\r\n        this.props.logout();\r\n        this.setState(updateObject(this.state,\r\n            {authmode: this.state.authmode==='login'? 'signup': 'login'}\r\n        ));\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    logStatus: state.auth.logStatus,\r\n    userId: state.auth.userId,\r\n    token: state.auth.token,\r\n    error: state.auth.error\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    // login: (uname,pwd)=> dispatch({type:'auth_login_start', uname, pwd}),\r\n    login: (uname,pwd,authmode)=> actions.authLogin(uname,pwd,authmode)(dispatch),\r\n    logout: () => dispatch({type: 'auth_logout'}),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)\r\n"]},"metadata":{},"sourceType":"module"}