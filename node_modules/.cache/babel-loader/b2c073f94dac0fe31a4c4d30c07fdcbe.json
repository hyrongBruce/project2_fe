{"ast":null,"code":"var _jsxFileName = \"D:\\\\ItlizeDocs\\\\project2\\\\project2_fe\\\\src\\\\components\\\\SideTool\\\\SideTool.js\";\nimport React from 'react';\nimport { Accordion, AccordionTab } from 'primereact/accordion';\nimport { Slider } from 'primereact/slider';\nimport { connect } from 'react-redux';\nimport './SideTool.css'; // import Slider from '@material-ui/core/Slider';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport transferImg from '../../assets/image/transfer.png';\nimport { InputText } from 'primereact/inputtext';\nimport * as actions from '../../store/actions/Index';\nimport RangeSlider from './mySliderInput';\n\nclass SideTool extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      items: {}\n    };\n    this.accordionBars = [];\n\n    this.setSliderInfo = () => {\n      this.accordionBars = [];\n\n      for (let key in this.state.items) {\n        let sliders = [];\n\n        for (let key_item in this.state.items[key]) {\n          let min = this.state.items[key][key_item].min;\n          let max = this.state.items[key][key_item].max;\n          let value = this.state.items[key][key_item].value;\n          let step = this.state.items[key][key_item].step;\n          sliders.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"mySliderTitles\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"img\", {\n            src: transferImg,\n            alt: \"transfericon\",\n            height: \"15\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }\n          })), /*#__PURE__*/React.createElement(\"span\", {\n            className: \"mySliderTitles\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 25\n            }\n          }, this.state.items[key][key_item].title + (this.state.items[key][key_item].unit ? '(' + this.state.items[key][key_item].unit + ')' : ''))));\n          sliders.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"mySliderBox\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: \"mySliderValueLeftBox\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(InputText, {\n            keyfilter: \"num\",\n            value: this.state.items[key][key_item].value[0],\n            onChange: event => this.sliderTextChangeHandler(event, key, key_item, 0),\n            className: \"mySliderTextValues\",\n            onBlur: event => this.sliderTextBlurHandler(event.target.value, key, key_item, 0),\n            style: {\n              fontSize: '12px',\n              fontWeight: 'bold'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 25\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(RangeSlider, {\n            value: value,\n            min: min,\n            max: max,\n            step: step,\n            handleChange: (value, newvalue) => this.slideValueChangeHandler(value, newvalue, key, key_item),\n            handleBlur: () => this.slideEndHandler(key, key_item),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 25\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"mySliderValueRightBox\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(InputText, {\n            keyfilter: \"num\",\n            value: this.state.items[key][key_item].value[1],\n            onChange: event => this.sliderTextChangeHandler(event, key, key_item, 1),\n            className: \"mySliderTextValues\",\n            onBlur: event => this.sliderTextBlurHandler(event.target.value, key, key_item, 1),\n            style: {\n              fontSize: '12px',\n              fontWeight: 'bold'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 25\n            }\n          }))));\n        }\n\n        this.accordionBars.push( /*#__PURE__*/React.createElement(AccordionTab, {\n          header: key.replace('_', ' '),\n          key: key,\n          contentClassName: \"myAccordionContent\",\n          headerClassName: \"myAccordionHeader\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 37\n          }\n        }, sliders));\n      }\n    };\n\n    this.slideValueChangeHandler = (value, newvalue, accid, innerid) => {\n      let changedItem = this.state.items[accid][innerid];\n      changedItem.value = newvalue;\n      let newItem = {};\n      newItem[accid] = {};\n      newItem[accid][innerid] = changedItem;\n      console.log(newvalue);\n      this.setState({\n        items: newItem\n      });\n    };\n\n    this.slideEndHandler = (accid, innerid) => {\n      this.props.filterValueChange(this.state.items, accid, innerid);\n    };\n\n    this.sliderTextChangeHandler = (event, accid, innerid, elementindex) => {\n      console.log('text change:');\n      let oldevent = this.state.items[accid][innerid].value;\n      let newevent = oldevent;\n      newevent[elementindex] = event.target.value;\n      let min = this.state.items[accid][innerid].min;\n      let max = this.state.items[accid][innerid].max;\n      if (newevent[0] < min) newevent[0] = min;\n      if (newevent[1] > max) newevent[1] = max;\n      if (newevent[0] > newevent[1]) if (newevent[1] <= max) newevent[0] = newevent[1];else if (newevent[0] >= min) newevent[1] = newevent[0];\n      this.slideValueChangeHandler(oldevent, newevent, accid, innerid);\n    };\n\n    this.sliderTextBlurHandler = (newvalue, accid, innerid, index) => {\n      let items = this.state.items;\n      items[accid][innerid].value[index] = parseFloat(newvalue);\n      console.log('text blur');\n      console.log(items[accid][innerid].value);\n      this.props.filterValueChange(items, accid, innerid);\n    };\n\n    this.filterResetHandler = () => {\n      let items = this.state.items;\n\n      for (let key in items) {\n        for (let key_item in items[key]) {\n          let curitem = items[key][key_item];\n          items[key][key_item].value = [curitem.min, curitem.max];\n        }\n      }\n\n      this.props.filterClear(items);\n      this.setState({\n        items: items\n      });\n    };\n  }\n\n  render() {\n    this.state.items = this.props.items;\n    this.setSliderInfo();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"SideBarPanel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mySideBarPanel-ButtonArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"mySideBarPanel-ButtonArea-Span\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }\n    }, \"Search:\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"mySideBarPanel-ButtonArea-Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 25\n      }\n    }, \"save\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"mySideBarPanel-ButtonArea-Button\",\n      onClick: this.filterResetHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }\n    }, \"clear\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"SideBarPanel-Accordion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, \"Product\", /*#__PURE__*/React.createElement(Accordion, {\n      multiple: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }\n    }, this.accordionBars)));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  items: state.filter.sideitems\n});\n\nconst mapDispatchToProps = dispatch => ({\n  filterValueChange: (items, accid, innerid) => actions.filterValueChange(items, accid, innerid)(dispatch),\n  filterClear: items => actions.filterReset(items)(dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideTool);","map":{"version":3,"sources":["D:/ItlizeDocs/project2/project2_fe/src/components/SideTool/SideTool.js"],"names":["React","Accordion","AccordionTab","Slider","connect","makeStyles","Input","transferImg","InputText","actions","RangeSlider","SideTool","Component","state","items","accordionBars","setSliderInfo","key","sliders","key_item","min","max","value","step","push","title","unit","event","sliderTextChangeHandler","sliderTextBlurHandler","target","fontSize","fontWeight","newvalue","slideValueChangeHandler","slideEndHandler","replace","accid","innerid","changedItem","newItem","console","log","setState","props","filterValueChange","elementindex","oldevent","newevent","index","parseFloat","filterResetHandler","curitem","filterClear","render","mapStateToProps","filter","sideitems","mapDispatchToProps","dispatch","filterReset"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAkBC,YAAlB,QAAqC,sBAArC;AACA,SAAQC,MAAR,QAAqB,mBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,gBAAP,C,CACA;;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;;AAEA,MAAMC,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAsC;AAAA;AAAA;AAAA,SAClCC,KADkC,GAC5B;AACFC,MAAAA,KAAK,EAAE;AADL,KAD4B;AAAA,SAKlCC,aALkC,GAKlB,EALkB;;AAAA,SAuClCC,aAvCkC,GAuClB,MAAM;AAClB,WAAKD,aAAL,GAAmB,EAAnB;;AAEA,WAAI,IAAIE,GAAR,IAAe,KAAKJ,KAAL,CAAWC,KAA1B,EAAgC;AAE5B,YAAII,OAAO,GAAE,EAAb;;AACA,aAAI,IAAIC,QAAR,IAAoB,KAAKN,KAAL,CAAWC,KAAX,CAAiBG,GAAjB,CAApB,EAA0C;AACtC,cAAIG,GAAG,GAAC,KAAKP,KAAL,CAAWC,KAAX,CAAiBG,GAAjB,EAAsBE,QAAtB,EAAgCC,GAAxC;AACA,cAAIC,GAAG,GAAC,KAAKR,KAAL,CAAWC,KAAX,CAAiBG,GAAjB,EAAsBE,QAAtB,EAAgCE,GAAxC;AACA,cAAIC,KAAK,GAAC,KAAKT,KAAL,CAAWC,KAAX,CAAiBG,GAAjB,EAAsBE,QAAtB,EAAgCG,KAA1C;AACA,cAAIC,IAAI,GAAC,KAAKV,KAAL,CAAWC,KAAX,CAAiBG,GAAjB,EAAsBE,QAAtB,EAAgCI,IAAzC;AAGAL,UAAAA,OAAO,CAACM,IAAR,eACI;AAAK,YAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAEI;AAAK,YAAA,GAAG,EAAEjB,WAAV;AAAuB,YAAA,GAAG,EAAC,cAA3B;AAA0C,YAAA,MAAM,EAAC,IAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,CADJ,eAKI;AAAM,YAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK,KAAKM,KAAL,CAAWC,KAAX,CAAiBG,GAAjB,EAAsBE,QAAtB,EAAgCM,KAAhC,IACK,KAAKZ,KAAL,CAAWC,KAAX,CAAiBG,GAAjB,EAAsBE,QAAtB,EAAgCO,IAAjC,GAAuC,MAAI,KAAKb,KAAL,CAAWC,KAAX,CAAiBG,GAAjB,EAAsBE,QAAtB,EAAgCO,IAApC,GAAyC,GAAhF,GAAoF,EADxF,CADL,CALJ,CADJ;AAcAR,UAAAA,OAAO,CAACM,IAAR,eACA;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI;AAAK,YAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,SAAD;AAAW,YAAA,SAAS,EAAC,KAArB;AACI,YAAA,KAAK,EAAE,KAAKX,KAAL,CAAWC,KAAX,CAAiBG,GAAjB,EAAsBE,QAAtB,EAAgCG,KAAhC,CAAsC,CAAtC,CADX;AAEI,YAAA,QAAQ,EAAGK,KAAD,IAAW,KAAKC,uBAAL,CAA6BD,KAA7B,EAAmCV,GAAnC,EAAuCE,QAAvC,EAAgD,CAAhD,CAFzB;AAGI,YAAA,SAAS,EAAC,oBAHd;AAII,YAAA,MAAM,EAAGQ,KAAD,IAAU,KAAKE,qBAAL,CAA2BF,KAAK,CAACG,MAAN,CAAaR,KAAxC,EAA+CL,GAA/C,EAAoDE,QAApD,EAA6D,CAA7D,CAJtB;AAKI,YAAA,KAAK,EAAE;AAACY,cAAAA,QAAQ,EAAE,MAAX;AAAmBC,cAAAA,UAAU,EAAE;AAA/B,aALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADJ,eAiCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,WAAD;AACI,YAAA,KAAK,EAAEV,KADX;AAEI,YAAA,GAAG,EAAEF,GAFT;AAGI,YAAA,GAAG,EAAEC,GAHT;AAII,YAAA,IAAI,EAAEE,IAJV;AAKI,YAAA,YAAY,EAAE,CAACD,KAAD,EAAQW,QAAR,KAAqB,KAAKC,uBAAL,CAA6BZ,KAA7B,EAAmCW,QAAnC,EAA4ChB,GAA5C,EAAiDE,QAAjD,CALvC;AAMI,YAAA,UAAU,EAAE,MAAM,KAAKgB,eAAL,CAAqBlB,GAArB,EAA0BE,QAA1B,CANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CAjCJ,eA2CI;AAAK,YAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,SAAD;AAAW,YAAA,SAAS,EAAC,KAArB;AACI,YAAA,KAAK,EAAE,KAAKN,KAAL,CAAWC,KAAX,CAAiBG,GAAjB,EAAsBE,QAAtB,EAAgCG,KAAhC,CAAsC,CAAtC,CADX;AAEI,YAAA,QAAQ,EAAGK,KAAD,IAAW,KAAKC,uBAAL,CAA6BD,KAA7B,EAAmCV,GAAnC,EAAuCE,QAAvC,EAAgD,CAAhD,CAFzB;AAGI,YAAA,SAAS,EAAC,oBAHd;AAII,YAAA,MAAM,EAAGQ,KAAD,IAAU,KAAKE,qBAAL,CAA2BF,KAAK,CAACG,MAAN,CAAaR,KAAxC,EAA+CL,GAA/C,EAAoDE,QAApD,EAA6D,CAA7D,CAJtB;AAKI,YAAA,KAAK,EAAE;AAACY,cAAAA,QAAQ,EAAC,MAAV;AAAkBC,cAAAA,UAAU,EAAE;AAA9B,aALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CA3CJ,CADA;AAuDH;;AACD,aAAKjB,aAAL,CAAmBS,IAAnB,eAAwB,oBAAC,YAAD;AAAc,UAAA,MAAM,EAAEP,GAAG,CAACmB,OAAJ,CAAY,GAAZ,EAAgB,GAAhB,CAAtB;AAA4C,UAAA,GAAG,EAAEnB,GAAjD;AACpB,UAAA,gBAAgB,EAAC,oBADG;AACkB,UAAA,eAAe,EAAC,mBADlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEnBC,OAFmB,CAAxB;AAIH;AACJ,KA/HiC;;AAAA,SA4IlCgB,uBA5IkC,GA4IR,CAACZ,KAAD,EAAQW,QAAR,EAAkBI,KAAlB,EAAyBC,OAAzB,KAAqC;AAC3D,UAAIC,WAAW,GAAG,KAAK1B,KAAL,CAAWC,KAAX,CAAiBuB,KAAjB,EAAwBC,OAAxB,CAAlB;AACAC,MAAAA,WAAW,CAACjB,KAAZ,GAAoBW,QAApB;AAEA,UAAIO,OAAO,GAAG,EAAd;AACAA,MAAAA,OAAO,CAACH,KAAD,CAAP,GAAe,EAAf;AACAG,MAAAA,OAAO,CAACH,KAAD,CAAP,CAAeC,OAAf,IAAwBC,WAAxB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACA,WAAKU,QAAL,CAAc;AAAC7B,QAAAA,KAAK,EAAE0B;AAAR,OAAd;AACH,KArJiC;;AAAA,SAuJlCL,eAvJkC,GAuJhB,CAACE,KAAD,EAAQC,OAAR,KAAoB;AAClC,WAAKM,KAAL,CAAWC,iBAAX,CAA6B,KAAKhC,KAAL,CAAWC,KAAxC,EAA+CuB,KAA/C,EAAsDC,OAAtD;AACH,KAzJiC;;AAAA,SA2JlCV,uBA3JkC,GA2JR,CAACD,KAAD,EAAQU,KAAR,EAAeC,OAAf,EAAwBQ,YAAxB,KAAwC;AAC9DL,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,UAAIK,QAAQ,GAAG,KAAKlC,KAAL,CAAWC,KAAX,CAAiBuB,KAAjB,EAAwBC,OAAxB,EAAiChB,KAAhD;AACA,UAAI0B,QAAQ,GAAGD,QAAf;AAEAC,MAAAA,QAAQ,CAACF,YAAD,CAAR,GAAuBnB,KAAK,CAACG,MAAN,CAAaR,KAApC;AAEA,UAAIF,GAAG,GAAC,KAAKP,KAAL,CAAWC,KAAX,CAAiBuB,KAAjB,EAAwBC,OAAxB,EAAiClB,GAAzC;AACA,UAAIC,GAAG,GAAC,KAAKR,KAAL,CAAWC,KAAX,CAAiBuB,KAAjB,EAAwBC,OAAxB,EAAiCjB,GAAzC;AAEA,UAAG2B,QAAQ,CAAC,CAAD,CAAR,GAAY5B,GAAf,EAAoB4B,QAAQ,CAAC,CAAD,CAAR,GAAY5B,GAAZ;AACpB,UAAG4B,QAAQ,CAAC,CAAD,CAAR,GAAY3B,GAAf,EAAoB2B,QAAQ,CAAC,CAAD,CAAR,GAAY3B,GAAZ;AACpB,UAAG2B,QAAQ,CAAC,CAAD,CAAR,GAAYA,QAAQ,CAAC,CAAD,CAAvB,EACI,IAAGA,QAAQ,CAAC,CAAD,CAAR,IAAa3B,GAAhB,EAAoB2B,QAAQ,CAAC,CAAD,CAAR,GAAYA,QAAQ,CAAC,CAAD,CAApB,CAApB,KAEA,IAAGA,QAAQ,CAAC,CAAD,CAAR,IAAa5B,GAAhB,EAAoB4B,QAAQ,CAAC,CAAD,CAAR,GAAYA,QAAQ,CAAC,CAAD,CAApB;AAExB,WAAKd,uBAAL,CAA6Ba,QAA7B,EAAsCC,QAAtC,EAAgDX,KAAhD,EAAuDC,OAAvD;AACH,KA7KiC;;AAAA,SA+KlCT,qBA/KkC,GA+KV,CAACI,QAAD,EAAWI,KAAX,EAAkBC,OAAlB,EAA2BW,KAA3B,KAAoC;AACxD,UAAInC,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;AACAA,MAAAA,KAAK,CAACuB,KAAD,CAAL,CAAaC,OAAb,EAAsBhB,KAAtB,CAA4B2B,KAA5B,IAAqCC,UAAU,CAACjB,QAAD,CAA/C;AAEAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY5B,KAAK,CAACuB,KAAD,CAAL,CAAaC,OAAb,EAAsBhB,KAAlC;AACA,WAAKsB,KAAL,CAAWC,iBAAX,CAA6B/B,KAA7B,EAAoCuB,KAApC,EAA2CC,OAA3C;AACH,KAtLiC;;AAAA,SAwLlCa,kBAxLkC,GAwLb,MAAM;AACvB,UAAIrC,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;;AAEA,WAAI,IAAIG,GAAR,IAAeH,KAAf,EAAqB;AACjB,aAAI,IAAIK,QAAR,IAAoBL,KAAK,CAACG,GAAD,CAAzB,EAA+B;AAC3B,cAAImC,OAAO,GAAGtC,KAAK,CAACG,GAAD,CAAL,CAAWE,QAAX,CAAd;AACAL,UAAAA,KAAK,CAACG,GAAD,CAAL,CAAWE,QAAX,EAAqBG,KAArB,GAA2B,CAAC8B,OAAO,CAAChC,GAAT,EAAagC,OAAO,CAAC/B,GAArB,CAA3B;AACH;AACJ;;AAED,WAAKuB,KAAL,CAAWS,WAAX,CAAuBvC,KAAvB;AACA,WAAK6B,QAAL,CAAc;AAAC7B,QAAAA,KAAK,EAAEA;AAAR,OAAd;AACH,KApMiC;AAAA;;AAOlCwC,EAAAA,MAAM,GAAE;AACJ,SAAKzC,KAAL,CAAWC,KAAX,GAAmB,KAAK8B,KAAL,CAAW9B,KAA9B;AACA,SAAKE,aAAL;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,SAAS,EAAC,gCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,SAAS,EAAC,kCAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CAJJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,SAAS,EAAC,kCAAlB;AACI,MAAA,OAAO,EAAE,KAAKmC,kBADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CATJ,CADJ,eAkBI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEI,oBAAC,SAAD;AAAW,MAAA,QAAQ,EAAE,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKpC,aADV,CAFJ,CAlBJ,CADJ;AA2BH;;AArCiC;;AAwMtC,MAAMwC,eAAe,GAAI1C,KAAD,KAAY;AAChCC,EAAAA,KAAK,EAAED,KAAK,CAAC2C,MAAN,CAAaC;AADY,CAAZ,CAAxB;;AAIA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpCd,EAAAA,iBAAiB,EAAE,CAAC/B,KAAD,EAAQuB,KAAR,EAAeC,OAAf,KAA2B7B,OAAO,CAACoC,iBAAR,CAA0B/B,KAA1B,EAAiCuB,KAAjC,EAAwCC,OAAxC,EAAiDqB,QAAjD,CADV;AAEpCN,EAAAA,WAAW,EAAGvC,KAAD,IAAWL,OAAO,CAACmD,WAAR,CAAoB9C,KAApB,EAA2B6C,QAA3B;AAFY,CAAL,CAAnC;;AAMA,eAAevD,OAAO,CAACmD,eAAD,EAAkBG,kBAAlB,CAAP,CAA6C/C,QAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport {Accordion,AccordionTab} from 'primereact/accordion';\r\nimport {Slider} from 'primereact/slider';\r\nimport { connect } from 'react-redux'\r\n\r\nimport './SideTool.css';\r\n// import Slider from '@material-ui/core/Slider';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Input from '@material-ui/core/Input';\r\nimport transferImg from '../../assets/image/transfer.png'\r\nimport { InputText } from 'primereact/inputtext';\r\nimport * as actions from '../../store/actions/Index';\r\nimport RangeSlider from './mySliderInput';\r\n\r\nclass SideTool extends React.Component{\r\n    state={\r\n        items: {},\r\n    }\r\n\r\n    accordionBars = [];\r\n    \r\n    render(){\r\n        this.state.items = this.props.items;\r\n        this.setSliderInfo();\r\n        return (\r\n            <div className=\"SideBarPanel\" >\r\n                <div className=\"mySideBarPanel-ButtonArea\">\r\n                    <span className=\"mySideBarPanel-ButtonArea-Span\">\r\n                        Search: \r\n                    </span>\r\n                    <div>\r\n                        <button className=\"mySideBarPanel-ButtonArea-Button\">\r\n                            save\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <button className=\"mySideBarPanel-ButtonArea-Button\"\r\n                            onClick={this.filterResetHandler}>\r\n                            clear\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"SideBarPanel-Accordion\">\r\n                    Product\r\n                    <Accordion multiple={true} >\r\n                        {this.accordionBars}\r\n                    </Accordion>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setSliderInfo = () => {\r\n        this.accordionBars=[];\r\n\r\n        for(let key in this.state.items){\r\n            \r\n            let sliders= [];\r\n            for(let key_item in this.state.items[key]){\r\n                let min=this.state.items[key][key_item].min;\r\n                let max=this.state.items[key][key_item].max;\r\n                let value=this.state.items[key][key_item].value;\r\n                let step=this.state.items[key][key_item].step;\r\n                \r\n\r\n                sliders.push(\r\n                    <div className=\"mySliderTitles\">\r\n                        <span>\r\n                            {/* <i className=\"pi pi-sort\"></i>   */}\r\n                            <img src={transferImg} alt=\"transfericon\" height=\"15\"/>\r\n                        </span>\r\n                        <span className=\"mySliderTitles\">\r\n                            {this.state.items[key][key_item].title+\r\n                                ((this.state.items[key][key_item].unit)?'('+this.state.items[key][key_item].unit+')':'')\r\n                            }\r\n                        </span>\r\n                    </div>\r\n                    \r\n                );  \r\n                sliders.push(\r\n                <div className=\"mySliderBox\">\r\n                    <div className=\"mySliderValueLeftBox\">\r\n                        <InputText keyfilter=\"num\"\r\n                            value={this.state.items[key][key_item].value[0]}\r\n                            onChange={(event) => this.sliderTextChangeHandler(event,key,key_item,0)}\r\n                            className=\"mySliderTextValues\"\r\n                            onBlur={(event)=> this.sliderTextBlurHandler(event.target.value, key, key_item,0)}\r\n                            style={{fontSize: '12px', fontWeight: 'bold'}}\r\n                            />\r\n                        {/* <Input \r\n                            value={value[0]}\r\n                            margin=\"dense\"\r\n                            onchange={(event) => this.sliderTextChangeHandler(event,key,key_item,0)}\r\n                            inputProps={{\r\n                                min: min,\r\n                                max: max,\r\n                                type: 'number'\r\n                            }}\r\n                        ></Input> */}\r\n                    </div>\r\n\r\n                    {/* <div>\r\n                        <Slider \r\n                            key={key_item}\r\n                            range={true} \r\n                            value={value}\r\n                            min={(min)?(min):0}\r\n                            max={max}\r\n                            onChange={(event) => this.slideValueChangeHandler(event, key, key_item)}\r\n                            onSlideEnd={event => this.slideEndHandler(event,key,key_item)}\r\n                            className=\"mySlider\"\r\n                        ></Slider>\r\n                    </div> */}\r\n                    <div>\r\n                        <RangeSlider \r\n                            value={value}\r\n                            min={min}\r\n                            max={max}\r\n                            step={step}\r\n                            handleChange={(value, newvalue) => this.slideValueChangeHandler(value,newvalue,key, key_item)}\r\n                            handleBlur={() => this.slideEndHandler(key, key_item)}\r\n                        ></RangeSlider>\r\n                    </div>\r\n                    <div className=\"mySliderValueRightBox\">\r\n                        <InputText keyfilter=\"num\" \r\n                            value={this.state.items[key][key_item].value[1]}\r\n                            onChange={(event) => this.sliderTextChangeHandler(event,key,key_item,1)}\r\n                            className=\"mySliderTextValues\"\r\n                            onBlur={(event)=> this.sliderTextBlurHandler(event.target.value, key, key_item,1)}\r\n                            style={{fontSize:'12px', fontWeight: 'bold'}}\r\n                            />\r\n                    </div>\r\n\r\n                </div>);\r\n            }\r\n            this.accordionBars.push(<AccordionTab header={key.replace('_',' ')} key={key} \r\n                contentClassName=\"myAccordionContent\" headerClassName=\"myAccordionHeader\">\r\n                {sliders}\r\n                </AccordionTab>);\r\n        }\r\n    }\r\n    \r\n    // slideValueChangeHandler = (event, accid, innerid) => {\r\n    //     let changedItem = this.state.items[accid][innerid];\r\n    //     changedItem.value = event.value;\r\n\r\n    //     let newItem = {};  \r\n    //     newItem[accid]={};\r\n    //     newItem[accid][innerid]=changedItem;\r\n    //     console.log(event);\r\n    //     this.setState({items: newItem});\r\n    // }\r\n\r\n    slideValueChangeHandler = (value, newvalue, accid, innerid) => {\r\n        let changedItem = this.state.items[accid][innerid];\r\n        changedItem.value = newvalue;\r\n\r\n        let newItem = {};  \r\n        newItem[accid]={};\r\n        newItem[accid][innerid]=changedItem;\r\n        console.log(newvalue);\r\n        this.setState({items: newItem});\r\n    }\r\n\r\n    slideEndHandler = (accid, innerid) => {\r\n        this.props.filterValueChange(this.state.items, accid, innerid);\r\n    }\r\n\r\n    sliderTextChangeHandler = (event, accid, innerid, elementindex) =>{\r\n        console.log('text change:');\r\n        let oldevent = this.state.items[accid][innerid].value;\r\n        let newevent = oldevent;\r\n\r\n        newevent[elementindex]=event.target.value;\r\n\r\n        let min=this.state.items[accid][innerid].min;\r\n        let max=this.state.items[accid][innerid].max;\r\n\r\n        if(newevent[0]<min) newevent[0]=min;\r\n        if(newevent[1]>max) newevent[1]=max;\r\n        if(newevent[0]>newevent[1]) \r\n            if(newevent[1]<=max)newevent[0]=newevent[1];\r\n        else\r\n            if(newevent[0]>=min)newevent[1]=newevent[0];\r\n\r\n        this.slideValueChangeHandler(oldevent,newevent, accid, innerid);\r\n    }\r\n\r\n    sliderTextBlurHandler = (newvalue, accid, innerid, index) =>{\r\n        let items = this.state.items;\r\n        items[accid][innerid].value[index] = parseFloat(newvalue);\r\n        \r\n        console.log('text blur');\r\n        console.log(items[accid][innerid].value);\r\n        this.props.filterValueChange(items, accid, innerid);    \r\n    }\r\n\r\n    filterResetHandler = () => {\r\n        let items = this.state.items;\r\n\r\n        for(let key in items){\r\n            for(let key_item in items[key]){\r\n                let curitem = items[key][key_item];\r\n                items[key][key_item].value=[curitem.min,curitem.max];\r\n            }\r\n        }\r\n        \r\n        this.props.filterClear(items);\r\n        this.setState({items: items});\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    items: state.filter.sideitems\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    filterValueChange: (items, accid, innerid) => actions.filterValueChange(items, accid, innerid)(dispatch),\r\n    filterClear: (items) => actions.filterReset(items)(dispatch),\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideTool)\r\n\r\n"]},"metadata":{},"sourceType":"module"}